{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bbede209",
   "metadata": {},
   "source": [
    "# MapUp Assessment"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a6c4b76",
   "metadata": {},
   "source": [
    "### Question 1\n",
    "Distance Matrix Calculation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "857e6752",
   "metadata": {},
   "source": [
    "Create a function named calculate_distance_matrix that takes the dataset-3.csv as input and generates a DataFrame representing distances between IDs.\n",
    "\n",
    "The resulting DataFrame should have cumulative distances along known routes, with diagonal values set to 0. If distances between toll locations A to B and B to C are known, then the distance from A to C should be the sum of these distances. Ensure the matrix is symmetric, accounting for bidirectional distances between toll locations (i.e. A to B is equal to B to A)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a22d66af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: networkx in c:\\users\\dell\\anaconda3\\lib\\site-packages (2.8.4)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install networkx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "42dbd8cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import networkx as nx\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4d88a51f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('dataset-3.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e73120e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id_start</th>\n",
       "      <th>id_end</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1001400</td>\n",
       "      <td>1001402</td>\n",
       "      <td>9.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001402</td>\n",
       "      <td>1001404</td>\n",
       "      <td>20.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001404</td>\n",
       "      <td>1001406</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001406</td>\n",
       "      <td>1001408</td>\n",
       "      <td>21.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001408</td>\n",
       "      <td>1001410</td>\n",
       "      <td>11.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id_start   id_end  distance\n",
       "0   1001400  1001402       9.7\n",
       "1   1001402  1001404      20.2\n",
       "2   1001404  1001406      16.0\n",
       "3   1001406  1001408      21.7\n",
       "4   1001408  1001410      11.1"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ce0292ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           1001400.0  1001402.0  1001404.0  1001406.0  1001408.0  1001410.0  \\\n",
      "1001400.0        0.0        9.7       29.9       45.9       67.6       78.7   \n",
      "1001402.0        9.7        0.0       20.2       36.2       57.9       69.0   \n",
      "1001404.0       29.9       20.2        0.0       16.0       37.7       48.8   \n",
      "1001406.0       45.9       36.2       16.0        0.0       21.7       32.8   \n",
      "1001408.0       67.6       57.9       37.7       21.7        0.0       11.1   \n",
      "1001410.0       78.7       69.0       48.8       32.8       11.1        0.0   \n",
      "1001412.0       94.3       84.6       64.4       48.4       26.7       15.6   \n",
      "1001414.0      112.5      102.8       82.6       66.6       44.9       33.8   \n",
      "1001416.0      125.7      116.0       95.8       79.8       58.1       47.0   \n",
      "1001418.0      139.3      129.6      109.4       93.4       71.7       60.6   \n",
      "1001420.0      152.2      142.5      122.3      106.3       84.6       73.5   \n",
      "1001422.0      161.8      152.1      131.9      115.9       94.2       83.1   \n",
      "1001424.0      173.2      163.5      143.3      127.3      105.6       94.5   \n",
      "1001426.0      191.8      182.1      161.9      145.9      124.2      113.1   \n",
      "1001428.0      207.6      197.9      177.7      161.7      140.0      128.9   \n",
      "1001430.0      216.2      206.5      186.3      170.3      148.6      137.5   \n",
      "1001432.0      225.2      215.5      195.3      179.3      157.6      146.5   \n",
      "1001434.0      233.1      223.4      203.2      187.2      165.5      154.4   \n",
      "1001436.0      237.1      227.4      207.2      191.2      169.5      158.4   \n",
      "1001437.0      242.1      232.4      212.2      196.2      174.5      163.4   \n",
      "1001438.0      246.1      236.4      216.2      200.2      178.5      167.4   \n",
      "1001440.0      256.1      246.4      226.2      210.2      188.5      177.4   \n",
      "1001442.0      260.0      250.3      230.1      214.1      192.4      181.3   \n",
      "1001444.0      273.2      263.5      243.3      227.3      205.6      194.5   \n",
      "1001446.0      279.8      270.1      249.9      233.9      212.2      201.1   \n",
      "1001448.0      289.4      279.7      259.5      243.5      221.8      210.7   \n",
      "1001450.0      305.1      295.4      275.2      259.2      237.5      226.4   \n",
      "1001452.0      315.0      305.3      285.1      269.1      247.4      236.3   \n",
      "1001454.0      326.3      316.6      296.4      280.4      258.7      247.6   \n",
      "1001456.0      339.9      330.2      310.0      294.0      272.3      261.2   \n",
      "1001458.0      348.8      339.1      318.9      302.9      281.2      270.1   \n",
      "1001460.0      353.9      344.2      324.0      308.0      286.3      275.2   \n",
      "1001461.0      366.7      357.0      336.8      320.8      299.1      288.0   \n",
      "1001462.0      371.8      362.1      341.9      325.9      304.2      293.1   \n",
      "1001464.0      398.5      388.8      368.6      352.6      330.9      319.8   \n",
      "1001466.0      407.0      397.3      377.1      361.1      339.4      328.3   \n",
      "1001468.0      417.7      408.0      387.8      371.8      350.1      339.0   \n",
      "1001470.0      428.3      418.6      398.4      382.4      360.7      349.6   \n",
      "1001472.0      444.3      434.6      414.4      398.4      376.7      365.6   \n",
      "1001488.0      264.5      254.8      234.6      218.6      196.9      185.8   \n",
      "1004354.0      270.5      260.8      240.6      224.6      202.9      191.8   \n",
      "1004355.0      272.5      262.8      242.6      226.6      204.9      193.8   \n",
      "1004356.0      268.5      258.8      238.6      222.6      200.9      189.8   \n",
      "\n",
      "           1001412.0  1001414.0  1001416.0  1001418.0  ...  1001462.0  \\\n",
      "1001400.0       94.3      112.5      125.7      139.3  ...      371.8   \n",
      "1001402.0       84.6      102.8      116.0      129.6  ...      362.1   \n",
      "1001404.0       64.4       82.6       95.8      109.4  ...      341.9   \n",
      "1001406.0       48.4       66.6       79.8       93.4  ...      325.9   \n",
      "1001408.0       26.7       44.9       58.1       71.7  ...      304.2   \n",
      "1001410.0       15.6       33.8       47.0       60.6  ...      293.1   \n",
      "1001412.0        0.0       18.2       31.4       45.0  ...      277.5   \n",
      "1001414.0       18.2        0.0       13.2       26.8  ...      259.3   \n",
      "1001416.0       31.4       13.2        0.0       13.6  ...      246.1   \n",
      "1001418.0       45.0       26.8       13.6        0.0  ...      232.5   \n",
      "1001420.0       57.9       39.7       26.5       12.9  ...      219.6   \n",
      "1001422.0       67.5       49.3       36.1       22.5  ...      210.0   \n",
      "1001424.0       78.9       60.7       47.5       33.9  ...      198.6   \n",
      "1001426.0       97.5       79.3       66.1       52.5  ...      180.0   \n",
      "1001428.0      113.3       95.1       81.9       68.3  ...      164.2   \n",
      "1001430.0      121.9      103.7       90.5       76.9  ...      155.6   \n",
      "1001432.0      130.9      112.7       99.5       85.9  ...      146.6   \n",
      "1001434.0      138.8      120.6      107.4       93.8  ...      138.7   \n",
      "1001436.0      142.8      124.6      111.4       97.8  ...      134.7   \n",
      "1001437.0      147.8      129.6      116.4      102.8  ...      129.7   \n",
      "1001438.0      151.8      133.6      120.4      106.8  ...      125.7   \n",
      "1001440.0      161.8      143.6      130.4      116.8  ...      115.7   \n",
      "1001442.0      165.7      147.5      134.3      120.7  ...      111.8   \n",
      "1001444.0      178.9      160.7      147.5      133.9  ...       98.6   \n",
      "1001446.0      185.5      167.3      154.1      140.5  ...       92.0   \n",
      "1001448.0      195.1      176.9      163.7      150.1  ...       82.4   \n",
      "1001450.0      210.8      192.6      179.4      165.8  ...       66.7   \n",
      "1001452.0      220.7      202.5      189.3      175.7  ...       56.8   \n",
      "1001454.0      232.0      213.8      200.6      187.0  ...       45.5   \n",
      "1001456.0      245.6      227.4      214.2      200.6  ...       31.9   \n",
      "1001458.0      254.5      236.3      223.1      209.5  ...       23.0   \n",
      "1001460.0      259.6      241.4      228.2      214.6  ...       17.9   \n",
      "1001461.0      272.4      254.2      241.0      227.4  ...        5.1   \n",
      "1001462.0      277.5      259.3      246.1      232.5  ...        0.0   \n",
      "1001464.0      304.2      286.0      272.8      259.2  ...       26.7   \n",
      "1001466.0      312.7      294.5      281.3      267.7  ...       35.2   \n",
      "1001468.0      323.4      305.2      292.0      278.4  ...       45.9   \n",
      "1001470.0      334.0      315.8      302.6      289.0  ...       56.5   \n",
      "1001472.0      350.0      331.8      318.6      305.0  ...       72.5   \n",
      "1001488.0      170.2      152.0      138.8      125.2  ...      107.3   \n",
      "1004354.0      176.2      158.0      144.8      131.2  ...      101.3   \n",
      "1004355.0      178.2      160.0      146.8      133.2  ...       99.3   \n",
      "1004356.0      174.2      156.0      142.8      129.2  ...      103.3   \n",
      "\n",
      "           1001464.0  1001466.0  1001468.0  1001470.0  1001472.0  1001488.0  \\\n",
      "1001400.0      398.5      407.0      417.7      428.3      444.3      264.5   \n",
      "1001402.0      388.8      397.3      408.0      418.6      434.6      254.8   \n",
      "1001404.0      368.6      377.1      387.8      398.4      414.4      234.6   \n",
      "1001406.0      352.6      361.1      371.8      382.4      398.4      218.6   \n",
      "1001408.0      330.9      339.4      350.1      360.7      376.7      196.9   \n",
      "1001410.0      319.8      328.3      339.0      349.6      365.6      185.8   \n",
      "1001412.0      304.2      312.7      323.4      334.0      350.0      170.2   \n",
      "1001414.0      286.0      294.5      305.2      315.8      331.8      152.0   \n",
      "1001416.0      272.8      281.3      292.0      302.6      318.6      138.8   \n",
      "1001418.0      259.2      267.7      278.4      289.0      305.0      125.2   \n",
      "1001420.0      246.3      254.8      265.5      276.1      292.1      112.3   \n",
      "1001422.0      236.7      245.2      255.9      266.5      282.5      102.7   \n",
      "1001424.0      225.3      233.8      244.5      255.1      271.1       91.3   \n",
      "1001426.0      206.7      215.2      225.9      236.5      252.5       72.7   \n",
      "1001428.0      190.9      199.4      210.1      220.7      236.7       56.9   \n",
      "1001430.0      182.3      190.8      201.5      212.1      228.1       48.3   \n",
      "1001432.0      173.3      181.8      192.5      203.1      219.1       39.3   \n",
      "1001434.0      165.4      173.9      184.6      195.2      211.2       31.4   \n",
      "1001436.0      161.4      169.9      180.6      191.2      207.2       27.4   \n",
      "1001437.0      156.4      164.9      175.6      186.2      202.2       22.4   \n",
      "1001438.0      152.4      160.9      171.6      182.2      198.2       18.4   \n",
      "1001440.0      142.4      150.9      161.6      172.2      188.2        8.4   \n",
      "1001442.0      138.5      147.0      157.7      168.3      184.3        4.5   \n",
      "1001444.0      125.3      133.8      144.5      155.1      171.1        8.7   \n",
      "1001446.0      118.7      127.2      137.9      148.5      164.5       15.3   \n",
      "1001448.0      109.1      117.6      128.3      138.9      154.9       24.9   \n",
      "1001450.0       93.4      101.9      112.6      123.2      139.2       40.6   \n",
      "1001452.0       83.5       92.0      102.7      113.3      129.3       50.5   \n",
      "1001454.0       72.2       80.7       91.4      102.0      118.0       61.8   \n",
      "1001456.0       58.6       67.1       77.8       88.4      104.4       75.4   \n",
      "1001458.0       49.7       58.2       68.9       79.5       95.5       84.3   \n",
      "1001460.0       44.6       53.1       63.8       74.4       90.4       89.4   \n",
      "1001461.0       31.8       40.3       51.0       61.6       77.6      102.2   \n",
      "1001462.0       26.7       35.2       45.9       56.5       72.5      107.3   \n",
      "1001464.0        0.0        8.5       19.2       29.8       45.8      134.0   \n",
      "1001466.0        8.5        0.0       10.7       21.3       37.3      142.5   \n",
      "1001468.0       19.2       10.7        0.0       10.6       26.6      153.2   \n",
      "1001470.0       29.8       21.3       10.6        0.0       16.0      163.8   \n",
      "1001472.0       45.8       37.3       26.6       16.0        0.0      179.8   \n",
      "1001488.0      134.0      142.5      153.2      163.8      179.8        0.0   \n",
      "1004354.0      128.0      136.5      147.2      157.8      173.8        6.0   \n",
      "1004355.0      126.0      134.5      145.2      155.8      171.8        8.0   \n",
      "1004356.0      130.0      138.5      149.2      159.8      175.8        4.0   \n",
      "\n",
      "           1004354.0  1004355.0  1004356.0  \n",
      "1001400.0      270.5      272.5      268.5  \n",
      "1001402.0      260.8      262.8      258.8  \n",
      "1001404.0      240.6      242.6      238.6  \n",
      "1001406.0      224.6      226.6      222.6  \n",
      "1001408.0      202.9      204.9      200.9  \n",
      "1001410.0      191.8      193.8      189.8  \n",
      "1001412.0      176.2      178.2      174.2  \n",
      "1001414.0      158.0      160.0      156.0  \n",
      "1001416.0      144.8      146.8      142.8  \n",
      "1001418.0      131.2      133.2      129.2  \n",
      "1001420.0      118.3      120.3      116.3  \n",
      "1001422.0      108.7      110.7      106.7  \n",
      "1001424.0       97.3       99.3       95.3  \n",
      "1001426.0       78.7       80.7       76.7  \n",
      "1001428.0       62.9       64.9       60.9  \n",
      "1001430.0       54.3       56.3       52.3  \n",
      "1001432.0       45.3       47.3       43.3  \n",
      "1001434.0       37.4       39.4       35.4  \n",
      "1001436.0       33.4       35.4       31.4  \n",
      "1001437.0       28.4       30.4       26.4  \n",
      "1001438.0       24.4       26.4       22.4  \n",
      "1001440.0       14.4       16.4       12.4  \n",
      "1001442.0       10.5       12.5        8.5  \n",
      "1001444.0        2.7        0.7        4.7  \n",
      "1001446.0        9.3        7.3       11.3  \n",
      "1001448.0       18.9       16.9       20.9  \n",
      "1001450.0       34.6       32.6       36.6  \n",
      "1001452.0       44.5       42.5       46.5  \n",
      "1001454.0       55.8       53.8       57.8  \n",
      "1001456.0       69.4       67.4       71.4  \n",
      "1001458.0       78.3       76.3       80.3  \n",
      "1001460.0       83.4       81.4       85.4  \n",
      "1001461.0       96.2       94.2       98.2  \n",
      "1001462.0      101.3       99.3      103.3  \n",
      "1001464.0      128.0      126.0      130.0  \n",
      "1001466.0      136.5      134.5      138.5  \n",
      "1001468.0      147.2      145.2      149.2  \n",
      "1001470.0      157.8      155.8      159.8  \n",
      "1001472.0      173.8      171.8      175.8  \n",
      "1001488.0        6.0        8.0        4.0  \n",
      "1004354.0        0.0        2.0        2.0  \n",
      "1004355.0        2.0        0.0        4.0  \n",
      "1004356.0        2.0        4.0        0.0  \n",
      "\n",
      "[43 rows x 43 columns]\n"
     ]
    }
   ],
   "source": [
    "def calculate_distance_matrix(df):\n",
    "    # Create a directed graph\n",
    "    G = nx.DiGraph()\n",
    "\n",
    "    # Adding edges to the graph with distances\n",
    "    for _, row in df.iterrows():\n",
    "        G.add_edge(row['id_start'], row['id_end'], weight=row['distance'])\n",
    "        G.add_edge(row['id_end'], row['id_start'], weight=row['distance'])  # Bidirectional\n",
    "\n",
    "    # Calculating the shortest path lengths between the nodes\n",
    "    distance_matrix = nx.floyd_warshall_numpy(G, weight='weight', nodelist=sorted(G.nodes()))\n",
    "\n",
    "    # Replacing the infinite distances with 0 for the diagonal\n",
    "    distance_matrix[distance_matrix == float('inf')] = 0\n",
    "\n",
    "    # Creating a DataFrame from the distance matrix\n",
    "    result_df = pd.DataFrame(distance_matrix, index=sorted(G.nodes()), columns=sorted(G.nodes()))\n",
    "\n",
    "    return result_df\n",
    "\n",
    "\n",
    "# Calling the function and displaying the result\n",
    "result_matrix = calculate_distance_matrix(df)\n",
    "print(result_matrix)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ab58073",
   "metadata": {},
   "source": [
    "### Question 2\n",
    "Unroll Distance Matrix\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b316e077",
   "metadata": {},
   "source": [
    "Create a function unroll_distance_matrix that takes the DataFrame created in Question 1. The resulting DataFrame should have three columns: columns id_start, id_end, and distance.\n",
    "\n",
    "All the combinations except for same id_start to id_end must be present in the rows with their distance values from the input DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6c65a311",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       id_start     id_end  distance\n",
      "0     1001400.0  1001402.0       9.7\n",
      "1     1001400.0  1001404.0      29.9\n",
      "2     1001400.0  1001406.0      45.9\n",
      "3     1001400.0  1001408.0      67.6\n",
      "4     1001400.0  1001410.0      78.7\n",
      "...         ...        ...       ...\n",
      "1801  1004356.0  1001470.0     159.8\n",
      "1802  1004356.0  1001472.0     175.8\n",
      "1803  1004356.0  1001488.0       4.0\n",
      "1804  1004356.0  1004354.0       2.0\n",
      "1805  1004356.0  1004355.0       4.0\n",
      "\n",
      "[1806 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "def unroll_distance_matrix(distance_matrix):\n",
    "    # Create an empty list to store unrolled data\n",
    "    unrolled_data = []\n",
    "\n",
    "    # Iterate through the rows and columns of the distance matrix\n",
    "    for i, start_id in enumerate(distance_matrix.index):\n",
    "        for j, end_id in enumerate(distance_matrix.columns):\n",
    "            # Exclude same id_start to id_end combinations\n",
    "            if i != j:\n",
    "                # Extract distance value from the distance matrix\n",
    "                distance_value = distance_matrix.iloc[i, j]\n",
    "\n",
    "                # Append data to the list\n",
    "                unrolled_data.append({'id_start': start_id, 'id_end': end_id, 'distance': distance_value})\n",
    "\n",
    "    # Create a DataFrame from the unrolled data\n",
    "    result_df = pd.DataFrame(unrolled_data)\n",
    "\n",
    "    return result_df\n",
    "\n",
    "# Example usage:\n",
    "# Assuming result_matrix is the DataFrame from Question 1\n",
    "result_unrolled = unroll_distance_matrix(result_matrix)\n",
    "print(result_unrolled)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6ee13b6",
   "metadata": {},
   "source": [
    "### Question 3\n",
    "Finding IDs within Percentage Threshold\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07cdb226",
   "metadata": {},
   "source": [
    "Create a function find_ids_within_ten_percentage_threshold that takes the DataFrame created in Question 2 and a reference value from the id_start column as an integer.\n",
    "\n",
    "Calculate average distance for the reference value given as an input and return a sorted list of values from id_start column which lie within 10% (including ceiling and floor) of the reference value's average."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "60242213",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1001400, 1001402, 1001404, 1001406, 1001408, 1001410, 1001412, 1001414, 1001416, 1001418, 1001420, 1001422, 1001424, 1001426, 1001428, 1001430, 1001432, 1001434, 1001436, 1001438, 1001440, 1001442, 1001444, 1001446, 1001448, 1001450, 1001452, 1001454, 1001456, 1001458, 1001460, 1001461, 1001462, 1001464, 1001466, 1001468, 1001470, 1001488, 1004354, 1004355, 1004356]\n"
     ]
    }
   ],
   "source": [
    "def find_ids_within_ten_percentage_threshold(df, reference_id):\n",
    "    # Filter rows based on the reference_id\n",
    "    reference_data = df[df['id_start'] == reference_id]\n",
    "\n",
    "    # Calculate the average distance for the reference_id\n",
    "    reference_average_distance = reference_data['distance'].mean()\n",
    "\n",
    "    # Calculate the threshold values (10% of the average distance)\n",
    "    lower_threshold = reference_average_distance - 0.1 * reference_average_distance\n",
    "    upper_threshold = reference_average_distance + 0.1 * reference_average_distance\n",
    "\n",
    "    # Filter rows within the threshold range\n",
    "    within_threshold_data = df[\n",
    "        (df['distance'] >= lower_threshold) &\n",
    "        (df['distance'] <= upper_threshold)\n",
    "    ]\n",
    "\n",
    "    # Get unique values from the id_start column and sort them\n",
    "    result_ids = sorted(df['id_start'].unique())\n",
    "\n",
    "    return result_ids\n",
    "\n",
    "# Example usage:\n",
    "# Assuming result_unrolled is the DataFrame from the previous question\n",
    "reference_id =  1001400.0# Replace with the desired reference ID\n",
    "result_within_threshold = find_ids_within_ten_percentage_threshold(df, reference_id)\n",
    "print(result_within_threshold)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f3d962a",
   "metadata": {},
   "source": [
    "### Question 4\n",
    "Calculate Toll Rate\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "202f2f20",
   "metadata": {},
   "source": [
    "#### Create a function calculate_toll_rate that takes the DataFrame created in Question 2 as input and calculates toll rates based on vehicle types.\n",
    "\n",
    "The resulting DataFrame should add 5 columns to the input DataFrame: moto, car, rv, bus, and truck with their respective rate coefficients. The toll rates should be calculated by multiplying the distance with the given rate coefficients for each vehicle type:\n",
    "\n",
    "0.8 for moto\n",
    "1.2 for car\n",
    "1.5 for rv\n",
    "2.2 for bus\n",
    "3.6 for truck"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "315b3bc7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       id_start     id_end  distance    moto     car      rv     bus   truck\n",
      "0     1001400.0  1001402.0       9.7    7.76   11.64   14.55   21.34   34.92\n",
      "1     1001400.0  1001404.0      29.9   23.92   35.88   44.85   65.78  107.64\n",
      "2     1001400.0  1001406.0      45.9   36.72   55.08   68.85  100.98  165.24\n",
      "3     1001400.0  1001408.0      67.6   54.08   81.12  101.40  148.72  243.36\n",
      "4     1001400.0  1001410.0      78.7   62.96   94.44  118.05  173.14  283.32\n",
      "...         ...        ...       ...     ...     ...     ...     ...     ...\n",
      "1801  1004356.0  1001470.0     159.8  127.84  191.76  239.70  351.56  575.28\n",
      "1802  1004356.0  1001472.0     175.8  140.64  210.96  263.70  386.76  632.88\n",
      "1803  1004356.0  1001488.0       4.0    3.20    4.80    6.00    8.80   14.40\n",
      "1804  1004356.0  1004354.0       2.0    1.60    2.40    3.00    4.40    7.20\n",
      "1805  1004356.0  1004355.0       4.0    3.20    4.80    6.00    8.80   14.40\n",
      "\n",
      "[1806 rows x 8 columns]\n"
     ]
    }
   ],
   "source": [
    "def calculate_toll_rate(result_unrolled):\n",
    "    # Define rate coefficients for each vehicle type\n",
    "    rate_coefficients = {'moto': 0.8, 'car': 1.2, 'rv': 1.5, 'bus': 2.2, 'truck': 3.6}\n",
    "\n",
    "    # Iterate through the rate coefficients and calculate toll rates for each vehicle type\n",
    "    for vehicle_type, rate_coefficient in rate_coefficients.items():\n",
    "        # Calculate toll rate column by multiplying distance with rate coefficient\n",
    "        result_unrolled[vehicle_type] = result_unrolled['distance'] * rate_coefficient\n",
    "\n",
    "    return result_unrolled\n",
    "\n",
    "# Example usage:\n",
    "# Assuming result_unrolled is the DataFrame from Question 2\n",
    "result_with_toll_rates = calculate_toll_rate(result_unrolled)\n",
    "print(result_with_toll_rates)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e142c5e4",
   "metadata": {},
   "source": [
    "### Question 5\n",
    "Calculate Time-Based Toll Rates"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3376b59a",
   "metadata": {},
   "source": [
    "#### Create a function named calculate_time_based_toll_rates that takes the DataFrame created in Question 3 as input and calculates toll rates for different time intervals within a day.\n",
    "\n",
    "The resulting DataFrame should have these five columns added to the input: start_day, start_time, end_day, and end_time.\n",
    "\n",
    "start_day, end_day must be strings with day values (from Monday to Sunday in proper case)\n",
    "start_time and end_time must be of type datetime.time() with the values from time range given below.\n",
    "Modify the values of vehicle columns according to the following time ranges:\n",
    "\n",
    "Weekdays (Monday - Friday):\n",
    "\n",
    "From 00:00:00 to 10:00:00: Apply a discount factor of 0.8\n",
    "From 10:00:00 to 18:00:00: Apply a discount factor of 1.2\n",
    "From 18:00:00 to 23:59:59: Apply a discount factor of 0.8\n",
    "Weekends (Saturday and Sunday):\n",
    "\n",
    "Apply a constant discount factor of 0.7 for all times.\n",
    "For each unique (id_start, id_end) pair, cover a full 24-hour period (from 12:00:00 AM to 11:59:59 PM) and span all 7 days of the week (from Monday to Sunday).\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bf099a99",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime, time, timedelta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cb34b669",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'timestamp'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3628\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3629\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3630\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'timestamp'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_4004\\2659972790.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     57\u001b[0m \u001b[1;31m# Example usage:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     58\u001b[0m \u001b[1;31m# Assuming input_df is the DataFrame from Question 3\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 59\u001b[1;33m \u001b[0mresult_with_time_based_toll_rates\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcalculate_time_based_toll_rates\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     60\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult_with_time_based_toll_rates\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_4004\\2659972790.py\u001b[0m in \u001b[0;36mcalculate_time_based_toll_rates\u001b[1;34m(df)\u001b[0m\n\u001b[0;32m     27\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     28\u001b[0m             \u001b[1;31m# Check if the row's time falls within the current time range\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 29\u001b[1;33m             \u001b[1;32mif\u001b[0m \u001b[0mstart_datetime\u001b[0m \u001b[1;33m<=\u001b[0m \u001b[0mrow\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'timestamp'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m<=\u001b[0m \u001b[0mend_datetime\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     30\u001b[0m                 \u001b[1;31m# Apply discount factor based on the day of the week\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     31\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0mrow\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'timestamp'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mweekday\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m<\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m:\u001b[0m  \u001b[1;31m# Weekdays\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    956\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    957\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mkey_is_scalar\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 958\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    959\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    960\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mis_hashable\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\series.py\u001b[0m in \u001b[0;36m_get_value\u001b[1;34m(self, label, takeable)\u001b[0m\n\u001b[0;32m   1067\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1068\u001b[0m         \u001b[1;31m# Similar to Index.get_value, but we do not fall back to positional\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1069\u001b[1;33m         \u001b[0mloc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1070\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_values_for_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1071\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3629\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3630\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3631\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3632\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3633\u001b[0m                 \u001b[1;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'timestamp'"
     ]
    }
   ],
   "source": [
    "def calculate_time_based_toll_rates(df):\n",
    "    # Convert input_df to a DataFrame if it's a list\n",
    "    if not isinstance(df, pd.DataFrame):\n",
    "        df = pd.DataFrame(df)\n",
    "\n",
    "    # Define time ranges and discount factors\n",
    "    time_ranges = [(time(0, 0), time(10, 0), 0.8),\n",
    "                   (time(10, 0), time(18, 0), 1.2),\n",
    "                   (time(18, 0), time(23, 59, 59), 0.8)]\n",
    "\n",
    "    weekend_discount_factor = 0.7\n",
    "\n",
    "    # Initialize empty lists to store new columns\n",
    "    start_day_list, start_time_list, end_day_list, end_time_list = [], [], [], []\n",
    "\n",
    "    # Iterate through rows and apply time-based toll rates\n",
    "    for i, row in df.iterrows():\n",
    "        for start_time, end_time, discount_factor in time_ranges:\n",
    "            # Check if start_time and end_time are within the same day\n",
    "            if start_time <= end_time:\n",
    "                start_datetime = datetime.combine(datetime.today(), start_time)\n",
    "                end_datetime = datetime.combine(datetime.today(), end_time)\n",
    "            else:\n",
    "                # If end_time is on the next day, adjust start_datetime\n",
    "                start_datetime = datetime.combine(datetime.today(), start_time) - timedelta(days=1)\n",
    "                end_datetime = datetime.combine(datetime.today(), end_time)\n",
    "\n",
    "            # Check if the row's time falls within the current time range\n",
    "            if start_datetime <= row['timestamp'] <= end_datetime:\n",
    "                # Apply discount factor based on the day of the week\n",
    "                if row['timestamp'].weekday() < 5:  # Weekdays\n",
    "                    discount_factor *= 1.0  # No additional discount\n",
    "                else:\n",
    "                    discount_factor *= weekend_discount_factor\n",
    "\n",
    "                # Append values to the lists\n",
    "                start_day_list.append(row['timestamp'].strftime('%A'))\n",
    "                start_time_list.append(start_time)\n",
    "                end_day_list.append(row['timestamp'].strftime('%A'))\n",
    "                end_time_list.append(end_time)\n",
    "\n",
    "                # Modify values of vehicle columns based on discount factor\n",
    "                for vehicle_type in ['moto', 'car', 'rv', 'bus', 'truck']:\n",
    "                    df.at[i, vehicle_type] *= discount_factor\n",
    "\n",
    "                # Exit the inner loop\n",
    "                break\n",
    "\n",
    "    # Add the new columns to the input DataFrame\n",
    "    df['start_day'] = start_day_list\n",
    "    df['start_time'] = start_time_list\n",
    "    df['end_day'] = end_day_list\n",
    "    df['end_time'] = end_time_list\n",
    "\n",
    "    return df\n",
    "\n",
    "# Example usage:\n",
    "# Assuming input_df is the DataFrame from Question 3\n",
    "result_with_time_based_toll_rates = calculate_time_based_toll_rates(df)\n",
    "print(result_with_time_based_toll_rates)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d114ad87",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddfd3562",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
